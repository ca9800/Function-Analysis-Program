"""
NOTES:
- to do exponents do ** not ^
- def of a derivitive = f' = (f(x+h) - f(x))/h as h approaches 0
- print (x, ",", eval(f)) 

"""

from math import sin, cos, radians

#inputs
f = input("enter a function equal to f(x) in terms of x: ")         #user inputs the funciton they want
#a = int(input("what is the lower limit of your interval?: "))      #user inputs the domain of the function 
#b = int(input("what is the upper limit of your interval?: "))      #user inputs the domain of the function
a = 0 # lower limit
b = 10 # upper limit
h = 0.000000001                 #defines delta x or h


########_finds f'
f1 = []                         # creates f1 which is a list that will contain y values for the function
for x in range(a,b+1):          
   f1.append(eval(f))           #calcuates f(x) and puts in f1


fprime = []                     #creates a list that will contain fprimes
for x in range (a,b+1):         
   x = h+x                      #redefines x as x + h to find f(x+h)
   fh= eval(f)                  #calculates f(x+h)
   x = int(x-h+.1)-a            #redefines x so that it points to the coresponding f(x) value in f1
   p=round(((fh-f1[x])/h), 3)   #rounds fprime
   fprime.append(p)             # calculates the derivitive using the definition of a derivitive and puts in fprime

#prints function outputs
print ("f(x) in range", a, "to", b, "equals: ") 
print (f1)

print ("f'(x) in range", a, "to", b, "equals: ") 
print (fprime)

print("absolute min: ", min(f1))
print("absolute max: ", max(f1))


#print (fprime[3])               #calling f' at x = 3

#print ("hi", fprime([x]))       #finds f prime given a list value of x

#fprime = fprime([x])
#fhprime = fprime([x+h])

print ("look", fprime([h+3]))





j = 0                               #sets the inital value for the ___ = 1
for x in range (a,b+1):         
   j = j+1                          #sets so every time the loop runs j increases by 1
   j.append()                       #makes j into a list
   print (j)
   

- fprime
- fhprime
   
   
   

"""
##############_finding f''


f2 = []                         # creates f2 which is a list that will contain y values for the function
for x in range(a,b+1):
    w = x+h
   f2.append(eval(fprime))      #calcuates f1(x) and puts in f2


fdouble = []                    #creates a list that will contain fdouble
for x in range (a,b+1):         
   x = h+x                      #redefines x as x + h to find f(x+h)
   fd= eval(fprime)             #calculates f(x+h)
   x = int(x-h+.1)-a            #redefines x so that it points to the coresponding f(x) value in f1
   fdouble.append((fd-f2[x])/h) # calculates the derivitive using the definition of a derivitive and puts in fprime

print (fdouble)







#####################_finds concavity using f''
#extrema at interior pts
if fprime.append(eval(f))==0 in list(fprime) and fdouble.append(eval(f))<0 in list(fdouble) :
    print("local max @")
if fprime.append(eval(f))==0 in list(fprime) and fdouble.append(eval(f))>0 in list(fdouble) :
    print("local min @")






#loop and figure out how to get x-value & include where fprime=DNE 1/0

#extrema at endpts
if fprime(a)<0:
    print ("local max @ x=", a)
if fprime(b)>0:
    print ("local max @ x=", a)
if fprime(b)<0:
    print ("local min @ x=", a)


#pts of inflection:
#if fprime2.append(Eval(f))=0 in list(fprime2) and
# +/-h are positive and negative=> POI



"""